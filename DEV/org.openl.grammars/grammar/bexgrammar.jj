options
{
  // see CharStream.html in doc for JavaCC
  // input streams were edited manually!
  UNICODE_INPUT = true;
  // TODO: JAVA_UNICODE_ESCAPE = true;

  LOOKAHEAD= 1;
  STATIC = false;
  // DEBUG_TOKEN_MANAGER = true;
  // DEBUG_PARSER = true;
  // DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(BExGrammar)
package org.openl.grammar.bexgrammar;

public class BExGrammar extends org.openl.grammar.JavaCC30Grammar
{
  public BExGrammar()
  {
    this (new java.io.StringReader(""));		
  }

  protected org.openl.util.text.IPosition begin(Token t)
  {
    return pos(t.beginLine, t.beginColumn);
  }

  protected org.openl.util.text.IPosition end(Token t)
  {
    return pos(t.endLine, t.endColumn);
  }

  protected org.openl.util.text.TextInterval pos(Token t)
  {
    return t == null ? null : new org.openl.util.text.TextInterval(begin(t), end(t));
  }

  protected org.openl.util.text.TextInterval pos(Token t1, Token t2)
  {
    return new org.openl.util.text.TextInterval(begin(t1), end(t2));
  }

  protected org.openl.util.text.TextInterval pos(
  String lexError, 
  Token t)
  {
    String prefix = "Lexical error at line ";
    if (!lexError.startsWith(prefix))
    {
      return pos(t);
    }
    lexError = lexError.substring(prefix.length());
    int i = 0;
    int line = 0;
    int col = 0;
    while (Character.isDigit(lexError.charAt(i)))
    {
      line = line * 10 + lexError.charAt(i) - '0';
      ++i;
    }
    String prefix2 = ", column ";
    i += prefix2.length();
    while (Character.isDigit(lexError.charAt(i)))
    {
      col = col * 10 + lexError.charAt(i) - '0';
      ++i;
    }
    return new org.openl.util.text.TextInterval(
    pos(line, col), 
    pos(line, col));
  }

  public void parseTopNode(String type)
  {
    try
    {
      switch (type) {
          case "method.body":
              parseTopNodeInternal();
              break;
          case "method.header":
              parseMethodHeader();
              break;
          case "module":
              parseModuleInternal();
              break;
          case "type":
              parseType();
              break;
      }
    }
    catch (ParseException pe)
    {
      syntaxError =
      new org.openl.syntax.exception.SyntaxNodeException(
      pe.getMessage(), 
      null, 
      pos(pe.currentToken), 
      module);
    }
    catch (TokenMgrError err)
    {
      org.openl.util.text.TextInterval loc = pos(err.getMessage(), token);
      syntaxError =
      new org.openl.syntax.exception.SyntaxNodeException(err.getMessage(), null, loc, module);
    }
    catch (Exception e)
    {
      syntaxError = new org.openl.syntax.exception.SyntaxNodeException("", e, pos(token), module);
    }
    catch (Throwable t)
    {
      syntaxError = new org.openl.syntax.exception.SyntaxNodeException("", t, pos(token), module);
    }
  }
} //EOF JGrammar

PARSER_END(BExGrammar)

< DEFAULT, REF_IDENTIFIER >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

<* >
TOKEN :
{
  < #_WHITESPACE :
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    ) >
}

TOKEN :
{
  < DOT_OPERATOR : "." > : REF_IDENTIFIER
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  //< ABSTRACT : "abstract" >
  //| < BOOLEAN: "boolean" >
  < BREAK : "break" >
  //| < BYTE: "byte" >
| < CASE : "case" >
| < CATCH : "catch" >
  //| < CHAR: "char" >
  //| < CLASS: "class" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DO : "do" >
  //| < DOUBLE: "double" >
| < ELSE : "else" >
  //| < EXTENDS : "extends" >
| < FALSE : "false" >
  //| < FINAL : "final" >
| < FINALLY : "finally" >
  //| < FLOAT: "float" >
| < FOR : "for" >
| < GOTO : "goto" >
| < IF : "if" >
  //| < IMPLEMENTS : "implements" >
  //| < IMPORT : "import" >
| < INSTANCEOF : "instanceof" >
  //| < INT: "int" >
  //| < INTERFACE : "interface" >
  //| < LONG: "long" >
  //| < NATIVE : "native" >
| < NEW : "new" >
| < NULL : "null" >
  //| < PACKAGE : "package" >
  //| < PRIVATE : "private" >
  //| < PROTECTED : "protected" >
  //| < PUBLIC : "public" >
| < RETURN : "return" >
  //| < SHORT: "short" >
  //| < STATIC : "static" >
| < SUPER : "super" >
  //| < SWITCH : "switch" >
  //| < SYNCHRONIZED : "synchronized" >
  //| < THIS: "this" >
| < THROW : "throw" >
| < THROWS : "throws" >
  //| < TRANSIENT : "transient" >
| < TRUE : "true" >
| < TRY : "try" >
| < VOID : "void" >
  //| < VOLATILE : "volatile" >
| < WHILE : "while" >
}

/* EXTENDED RESERVED WORDS */

TOKEN :
{
  < OF_THE : "of" (< _WHITESPACE >)+ "the" >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DDOT : ".." >
| < TDOT : "..." >
| < TDOT_UNICODE : "\u2026" > //"â€¦"
}

TOKEN :
{
  < WHERE : "where" >
}

/* OPERATORS */

TOKEN :
{
  < EQ :
    "=="
  | < EQUALS_TO >
  | < IS_SAME_AS >
  | < IS_THE_SAME_AS > >
| < #EQUALS_TO : "equals" (< _WHITESPACE >)+ "to" >
| < #IS_SAME_AS : "is" (< _WHITESPACE >)+ "same" (< _WHITESPACE >)+ "as" >
| < #IS_THE_SAME_AS : "is" (< _WHITESPACE >)+ "the" (< _WHITESPACE >)+ "same" (< _WHITESPACE >)+ "as" >
}

TOKEN :
{
  < ASSIGN : "=" >
| < GT : ">" >
| < STRICT_GT : ">==" >
| < LT : "<" >
| < STRICT_LT : "<==" >
| < NOT :
    "!"
  | "not" >
| < HOOK : "?" >
| < COLON : ":" >
  //| < DOLLAR: "$" >
| < STRICT_EQ : "====" >
| < LE : "<=" >
| < STRICT_LE : "<===" >
| < GE : ">=" >
| < STRICT_GE : ">===" >
| < NE : "!=" >
| < NE_ALT : "<>" >
| < STRICT_NE : "!===" >
| < BOOL_OR :
    "||"
  | "or" >
| < BOOL_AND :
    "&&"
  | "and" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < REM : "%" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < EXP : "**" >
| < IMPL : "->" >
| < STRING_LE : "string<=" >
| < STRING_LT : "string<" >
| < STRING_GE : "string>=" >
| < STRING_GT : "string>" >
| < STRING_EQ : "string==" >
| < STRING_NE : "string!=" >
| < STRING_NE_ALT : "string<>" >
}

TOKEN :
{
  < DOES_NOT_EQUAL_TO : "does" (< _WHITESPACE >)+ "not" (< _WHITESPACE >)+ "equal" (< _WHITESPACE >)+ "to" >
| < IS_DIFFERENT_FROM : "is" (< _WHITESPACE >)+ "different" (< _WHITESPACE >)+ "from" >
| < IS_LESS_THAN : "is" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "than" >
| < IS_MORE_THAN : "is" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "than" >
| < IS_LESS_OR_EQUAL : "is" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "or" (< _WHITESPACE >)+ "equal" >
| < IS_NO_MORE_THAN : "is" (< _WHITESPACE >)+ "no" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "than" >
| < IS_IN : "is" (< _WHITESPACE >)+ "in" >
| < IS_MORE_OR_EQUAL : "is" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "or" (< _WHITESPACE >)+ "equal" >
| < IS_NO_LESS_THAN : "is" (< _WHITESPACE >)+ "no" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "than" >
| < SELECT_ALL_HAVING : "select" (< _WHITESPACE >)+ "all" (< _WHITESPACE >)+ "having" >
| < SELECT_ALL_WHERE : "select" (< _WHITESPACE >)+ "all" (< _WHITESPACE >)+ "where" >
| < SELECT_FIRST_HAVING : "select" (< _WHITESPACE >)+ "first" (< _WHITESPACE >)+ "having" >
| < SELECT_FIRST_WHERE : "select" (< _WHITESPACE >)+ "first" (< _WHITESPACE >)+ "where" >
| < ORDER_BY : "order" (< _WHITESPACE >)+ "by" >
| < ORDER_INCREASING_BY : "order" (< _WHITESPACE >)+ "increasing" (< _WHITESPACE >)+ "by" >
| < ORDER_DECREASING_BY : "order" (< _WHITESPACE >)+ "decreasing" (< _WHITESPACE >)+ "by" >
| < SPLIT_BY : "split" (< _WHITESPACE >)+ "by" >
| < TRANSFORM_TO : "transform" (< _WHITESPACE >)+ "to" >
| < TRANSFORM_UNIQUE_TO : "transform" (< _WHITESPACE >)+ "unique" (< _WHITESPACE >)+ "to" >
| < LESS_THAN : "less" (< _WHITESPACE >)+ "than" >
| < MORE_THAN : "more" (< _WHITESPACE >)+ "than" >
| < OR_LESS : "or" (< _WHITESPACE >)+ "less" >
| < AND_MORE : "and" (< _WHITESPACE >)+ "more" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| 
  < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| 
  < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| 
  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| 
  < #FP_LITERAL1 :
    ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )? >
| 
  < #FP_LITERAL2 :
    [ "1"-"9" ] ([ "0"-"9" ])? ([ "0"-"9" ])? ("," [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )? >
| 
  < FLOATING_POINT_LITERAL :
    (
      ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
    | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
    | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
    | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ]
    ) 
  >
| 
  < BUSINESS_INTEGER_LITERAL :
    ("$")? 	< FP_LITERAL1 > ([ "M", "K", "B" ])?
  | 
    ("$")? 	< FP_LITERAL2 > ([ "M", "K", "B" ])? 
  >
| 
  < DATE_FORMAT_LITERAL_4_2_2 : 
    [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] 
  >
| 
  < TIME_FORMAT_LITERAL :
    [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ]
    (
      ":" [ "0"-"9" ] [ "0"-"9" ] ("." [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ])?
    )? 
  >
| 
  < PERCENT_LITERAL : 
    ([ "0"-"9" ])+ ("." [ "0"-"9" ] [ "0"-"9" ])? "%" 		
  >
| 
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| 
  < CHARACTER_LITERAL :
    "'"
    (
      (~[ "'", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )
    "'" 
  >
| 
  < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        | "u"
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          )
        )
      )
    )*
    "\"" 
  >
}

/* IDENTIFIERS */

< DEFAULT, REF_IDENTIFIER >
TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
  : DEFAULT
| 
  < #LETTER : 
    [ 
    "$", 
    "A"-"Z", 
    "_", 
    "a"-"z", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u00ff", 
    "\u0100"-"\u1fff", 
    "\u3040"-"\u318f", 
    "\u3300"-"\u337f", 
    "\u3400"-"\u3d2d", 
    "\u4e00"-"\u9fff", 
    "\uf900"-"\ufaff" 
    ] 
  >
| 
  < #DIGIT : 
    [ 
    "0"-"9", 
    "\u0660"-"\u0669", 
    "\u06f0"-"\u06f9", 
    "\u0966"-"\u096f", 
    "\u09e6"-"\u09ef", 
    "\u0a66"-"\u0a6f", 
    "\u0ae6"-"\u0aef", 
    "\u0b66"-"\u0b6f", 
    "\u0be7"-"\u0bef", 
    "\u0c66"-"\u0c6f", 
    "\u0ce6"-"\u0cef", 
    "\u0d66"-"\u0d6f", 
    "\u0e50"-"\u0e59", 
    "\u0ed0"-"\u0ed9", 
    "\u1040"-"\u1049" 
    ] 
  >
}

TOKEN :
{
  < RANGE_VARIABLE : "$" < IDENTIFIER > ":$" < IDENTIFIER > >
}

/* COMMENTS */

MORE :
{
  //  "//" : IN_SINGLE_LINE_COMMENT
  //|
  < "/**" ~[ "/" ] >
  {
    input_stream.backup(1);
  }
  : IN_FORMAL_COMMENT
| 
  "/*" : IN_MULTI_LINE_COMMENT
}

//<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    )? >
}

< IN_FORMAL_COMMENT >
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

//<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
< IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

/*
 * Expression syntax follows.
 */

void Expression() :
{
  Token x;
  String func = null;
}
{
  ConditionalTernaryExpression()
  [
    (
      x = < ASSIGN >
      {
        func = "op.assign";
      }
    | x = < PLUSASSIGN >
      {
        func = "op.assign.add";
      }
    | x = < MINUSASSIGN >
      {
        func = "op.assign.subtract";
      }
    | x = < STARASSIGN >
      {
        func = "op.assign.multiply";
      }
    | x = < SLASHASSIGN >
      {
        func = "op.assign.divide";
      }
    )
    Expression()
    {
      bop(func, pos(x));
    }
  ]
}

void ConditionalTernaryExpression() :
{
  Token x;
}
{
  ConditionalImplExpression()
  [
    x = < HOOK > ConditionalTernaryExpression() < COLON > ConditionalTernaryExpression()
    {
      nop("op.ternary.qmark", pos(x), 3);
    }
  ]
}

void ConditionalImplExpression() :
{
  Token x;
}
{
  ConditionalOrExpression()
  (
    LOOKAHEAD(< IMPL >)
    (x = < IMPL >) ConditionalOrExpression()
    {
      bop("op.binary.impl", pos(x));
    }
  )*
}

void ConditionalOrExpression() :
{
  Token x;
}
{
  ConditionalAndExpression()
  (
    (
    x = < BOOL_OR >
    ) 
    ConditionalAndExpression()
    {
      bop("op.binary.or", pos(x));
    }
  )*
}

void ConditionalAndExpression() :
{
  Token x;
}
{
  EqualityExpression()
  (
    (
    x = < BOOL_AND >
    ) 
    EqualityExpression()
    {
      bop("op.binary.and", pos(x));
    }
  )*
}

void EqualityExpression() :
{
  Token x;
  String func;
}
{
  RelationalExpression()
  (
    (
      (
      x = < EQ >
      )
      {
        func = "op.binary.eq";
      }
    |
      (
        x = < NE >
      | x = < NE_ALT >
      | x = < DOES_NOT_EQUAL_TO >
      | x = < IS_DIFFERENT_FROM >
      )
      {
        func = "op.binary.ne";
      }
    | (x = < STRICT_EQ >)
      {
        func = "op.binary.strict_eq";
      }
    | (x = < STRICT_NE >)
      {
        func = "op.binary.strict_ne";
      }
    | x = < STRING_EQ >
      {
        func = "op.binary.string_eq";
      }
    |
      (
        x = < STRING_NE >
      | x = < STRING_NE_ALT >
      )
      {
        func = "op.binary.string_ne";
      }
    )
    RelationalExpression()
    {
      bop(func, pos(x));
    }
  )*
}

void RelationalExpression() :
{
  Token x;
  String func = null;
}
{
  AdditiveExpression()
  (
    (
      x = < LT >
      {
        func = "op.binary.lt";
      }
    | x = < IS_LESS_THAN >
      {
        func = "op.binary.lt";
      }
    | x = < GT >
      {
        func = "op.binary.gt";
      }
    | x = < IS_MORE_THAN >
      {
        func = "op.binary.gt";
      }
    | x = < LE >
      {
        func = "op.binary.le";
      }
    | x = < IS_LESS_OR_EQUAL >
      {
        func = "op.binary.le";
      }
    | x = < IS_NO_MORE_THAN >
      {
        func = "op.binary.le";
      }
    | x = < IS_IN >
      {
        func = "op.binary.le";
      }
    | x = < GE >
      {
        func = "op.binary.ge";
      }
    | x = < IS_MORE_OR_EQUAL >
      {
        func = "op.binary.ge";
      }
    | x = < IS_NO_LESS_THAN >
      {
        func = "op.binary.ge";
      }
    | x = < STRICT_GT >
      {
        func = "op.binary.strict_gt";
      }
    | x = < STRICT_GE >
      {
        func = "op.binary.strict_ge";
      }
    | x = < STRICT_LT >
      {
        func = "op.binary.strict_lt";
      }
    | x = < STRICT_LE >
      {
        func = "op.binary.strict_le";
      }
    | x = < STRING_LE >
      {
        func = "op.binary.string_le";
      }
    | x = < STRING_LT >
      {
        func = "op.binary.string_lt";
      }
    | x = < STRING_GE >
      {
        func = "op.binary.string_ge";
      }
    | x = < STRING_GT >
      {
        func = "op.binary.string_gt";
      }
    )
    AdditiveExpression()
    {
      bop(func, pos(x));
    }
  )*
}

void AdditiveExpression() :
{
  Token x;
  String func = null;
}
{
  MultiplicativeExpression()
  (
    (
      x = < PLUS >
      {
        func = "op.binary.add";
      }
    | x = < MINUS >
      {
        func = "op.binary.subtract";
      }
    )
    MultiplicativeExpression()
    {
      bop(func, pos(x));
    }
  )*
}

void MultiplicativeExpression() :
{
  Token x;
  String func = null;
}
{
  PowerExpression()
  (
    (
      x = < STAR >
      {
        func = "op.binary.multiply";
      }
    | x = < SLASH >
      {
        func = "op.binary.divide";
      }
    | x = < REM >
      {
        func = "op.binary.rem";
      }
    )
    PowerExpression()
    {
      bop(func, pos(x));
    }
  )*
}

void PowerExpression() :
{
  Token x;
}
{
  UnaryExpression()
  (
    LOOKAHEAD(< EXP >)
    x = < EXP > UnaryExpression()
    {
      bop("op.binary.pow", pos(x));
    }
  )*
}

void UnaryExpression() :
{
  Token x;
}
{
  x = < PLUS > UnaryExpression()
  {
    uop("op.unary.positive", pos(x));
  }
| 
  x = < MINUS > UnaryExpression()
  {
    uop("op.unary.negative", pos(x));
  }
|
  x = < NOT > UnaryExpression()
  {
    uop("op.unary.not", pos(x));
  }
| 
  PreIncrementExpression()
| 
  PreDecrementExpression()
| 
  LOOKAHEAD(CastLookahead())
  CastExpression()
| 
  PostfixExpression()
}

void OfTheExpressionSuffix() :
{
  Token x;
}
{
  x = < OF_THE > PrimaryExpression()
  {
    bop("chain.suffix.of.the", null);
  }
}

void PreIncrementExpression() :
{
  Token x;
}
{
  x = < INCR > PrimaryExpression()
  {
    uop("op.prefix.inc", pos(x));
  }
}

void PreDecrementExpression() :
{
  Token x;
}
{
  x = < DECR > PrimaryExpression()
  {
    uop("op.prefix.dec", pos(x));
  }
}

void PostfixExpression() :
{
  Token x;
}
{
  PrimaryExpression()
  [
    x = < INCR >
    {
      uop("op.suffix.inc", pos(x));
    }
  | x = < DECR >
    {
      uop("op.suffix.dec", pos(x));
    }
  ]
}

void PrimaryExpression() :
{
  int args = 1;
}
{
  PrimaryPrefix()
  (
    LOOKAHEAD(2)
    PrimarySuffix()
    {
      ++args;
    }
  )*
  {
    if (args > 1) 
    uop("chain", null);
  }
}

void PrimaryPrefix() :
{}
{
  CommaSeparatedList()
| 
  Literal()
|
  < LPAREN > Expression() < RPAREN >
| 
  AllocationExpression()
| 
  LOOKAHEAD(function())
  function()
| 
  LOOKAHEAD(2)
  rangeidentifier()
| 
  IdentifierSequence()
}

void IdentifierSequence() :
{
  Token x;
  int args = 1;
}
{
  (
    x = < IDENTIFIER >
    {
      identifier("identifier", pos(token), token.image);
    }
  )
  (
    x = < IDENTIFIER >
    {
      identifier("identifier.sequence.element", pos(token), token.image);
      ++args;
    }
  )*
  {
    if (args > 1)
    {
      nop("identifier.sequence", null, args);
    }
  }		
}

void Word(String type) :
{
  Token x;
}
{
  (
    x = < IDENTIFIER >
    {
      identifier(type, pos(token), token.image);
    }
  )
}

void PrimarySuffix() :
{}
{
  IndexOperator()
  {
    bop("chain.suffix.dot.index", null);
  }
| LOOKAHEAD(< DOT_OPERATOR > function())
  < DOT_OPERATOR > function()
  {
    bop("chain.suffix.dot.function", null);
  }
| LOOKAHEAD(OfTheExpressionSuffix())
  OfTheExpressionSuffix()
| LOOKAHEAD(< DOT_OPERATOR > identifier())
  < DOT_OPERATOR > identifier()
  {
    bop("chain.suffix.dot.identifier", null);
  }
}

void CastExpression() :
{
  Token x1, x2;
}
{
  x1 = < LPAREN > Type() x2 = < RPAREN > UnaryExpression()
  {
    bop("type.cast", pos(x1, x2));
  }
}

void CastLookahead() :
{}
{
  < LPAREN > Type() < RPAREN >
  (
    < PLUS >
  | < MINUS >
  | < NOT >
  | < LPAREN >
  | < LBRACKET >
  | < IDENTIFIER >
  | < NEW >
  | Literal()
  )
}

void identifier() :
{}
{
  < IDENTIFIER >
  {
    identifier("identifier", pos(token), token.image);
  }
}

void rangeidentifier() :
{}
{
  < RANGE_VARIABLE >
  {
    identifier("range.variable", pos(token), token.image);
  }
}

void TypeDimension() :
{
  Token x1, x2;
}
{
  x1 = < LBRACKET > x2 = < RBRACKET >
  {
    uop("type.index", pos(x1, x2));
  }
}

void parseType() :
{}
{
  Type() 
  < EOF >
}

void parseMethodHeader() :
{}
{
  MethodHeader() 
  < EOF >
}

void Type() :
{}
{
  ClassName()
  (
    TypeDimension()
  )*
  {
    uop("type.declaration", null);
  }
}

void ResultType() :
{}
{
  < VOID >
  {
    identifier("type.name", pos(token), token.image);
    uop("type.declaration", null);
  }
| 
  Type()
}

void ClassName() :
{
  String name;
  Token x1, x2;
}
{
  x1 = < IDENTIFIER >
  {
    name = token.image;
    x2 = x1;
  }
  (
    LOOKAHEAD(2)
    < DOT_OPERATOR > x2 = < IDENTIFIER >
    {
      name = name + "." + token.image;
    }
  )*
  {
    identifier("type.name", pos(x1, x2), name);
  }
}

void CommaSeparatedList() :
{
  int elements = 0;
  int words = 0;
}
{
  < LBRACKET >
  {
    words = 0;
  }
  (
    Word("identifier.list")
    {
      ++words;
    }
  )+
  {
    nop("list.element", null, words);
    ++elements;
  }
  (
    < COMMA >
    {
      words = 0;
    }
    (
      Word("identifier.list")
      {
        ++words;
      }
    )+
    {
      nop("list.element", null, words);
      ++elements;
    }
  )*
  < RBRACKET >
  {
    nop("list", null, elements);
  }
}

void function() :
{
  String funcname;
  int args = 0;
  Token x1, x2;
}
{
  x1 = < IDENTIFIER >
  {
    funcname = token.image;
  }
  < LPAREN >
  [
    VariableInitializer()
    {
      args++;
    }
    (
      < COMMA > VariableInitializer()
      {
        args++;
      }
    )*
  ]
  x2 = < RPAREN >
  {
    identifier("funcname", pos(x1), funcname);
    nop("function", pos(x1, x2), args + 1);
  }
}

void AllocationExpression() :
{
  int args = 0;
  Token x1, x2;
}
{
  x1 = < NEW > ClassName()
  (
    < LPAREN >
    [
      Expression()
      {
        args++;
      }
      (
        < COMMA > Expression()
        {
          args++;
        }
      )*
    ]
    x2 = < RPAREN >
    {
      nop("op.new.object", pos(x1, x2), args + 1);
    }
  | 
    ArrayDimsAndInits()
    {
      uop("op.new.array", pos(x1));
    }
  )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{
  Token x1, x2;
  int cnt = 0;
}
{
  LOOKAHEAD(2)
  (
    LOOKAHEAD(2)
    x1 = < LBRACKET > Expression() x2 = < RBRACKET >
    {
      bop("array.index.expression", pos(x1, x2));
      cnt++;
    }
  )+
  (
    LOOKAHEAD(2)
    x1 = < LBRACKET > x2 = < RBRACKET >
    {
      uop("array.index.empty", pos(x1, x2));
    }
  )*
|
  (
    TypeDimension()
  )+
  ArrayInitializer()
  {
    bop("new.array.initialized", null);
  }
}

void IndexTypeExpression() :
{
  Token x1, x2;
}
{
  LOOKAHEAD(3)
  (
    x1 = < LPAREN > Type() VariableDeclaratorId() x2 = < RPAREN >
    {
      nop("index.parameter.declaration", pos(x1, x2), 2);
    }
  )
| 
  LOOKAHEAD(3)
  (
    x1 = < LPAREN > VariableDeclaratorId() x2 = < RPAREN >
    {
      nop("index.parameter.declaration", pos(x1, x2), 1);
    }
  )
}

void IndexOperator() :
{
  Token x1, x2;
  String prefix = "op.index";
  boolean hasTypeExpression = false;
}
{
  (
    x1 = < LBRACKET >
    [
      LOOKAHEAD(4)

      [
        IndexTypeExpression()
        {
          hasTypeExpression = true;
        }
      ]
      (
        (
          "@"
        | < SELECT_ALL_HAVING >
        | < SELECT_ALL_WHERE >
        )
        {
          prefix = "selectall.index";
        }
      |
        (
          "!@"
        | < SELECT_FIRST_HAVING >
        | < SELECT_FIRST_WHERE >
        )
        {
          prefix = "selectfirst.index";
        }
      |
        (
          "^@"
        | < ORDER_BY >
        | < ORDER_INCREASING_BY >
        )
        {
          prefix = "orderby.index";
        }
      |
        (
          "v@"
        | < ORDER_DECREASING_BY >
        )
        {
          prefix = "orderdecreasingby.index";
        }
      |
        (
          "~@"
        | "s@"
        | < SPLIT_BY >
        )
        {
          prefix = "splitby.index";
        }
      |
        (
          "*@"
        | < TRANSFORM_TO >
        )
        {
          prefix = "transform.index";
        }
      |
        (
          "*!@"
        | < TRANSFORM_UNIQUE_TO >
        )
        {
          prefix = "transformunique.index";
        }
      )
    ]
    Expression()
    x2 = < RBRACKET >
    {
      if (hasTypeExpression)
      {
        nop(prefix, pos(x1, x2), 2);
      }
      else
      {
        uop(prefix, pos(x1, x2));
      }
    }
  )
}

void Literal() :
{}
{
  < INTEGER_LITERAL >
  {
    literal("literal.integer", pos(token), token.image);
  }
| 
  < BUSINESS_INTEGER_LITERAL >
  {
    literal("literal.integer.business", pos(token), token.image);
  }
| 
  < PERCENT_LITERAL >
  {
    literal("literal.percent", pos(token), token.image);
  }
| 
  < FLOATING_POINT_LITERAL >
  {
    literal("literal.real", pos(token), token.image);
  }
| 
  < STRING_LITERAL >
  {
    literal("literal.string", pos(token), token.image);
  }
| 
  < CHARACTER_LITERAL >
  {
    literal("literal.char", pos(token), token.image);
  }
| 
  BooleanLiteral()
| 
  LOOKAHEAD(DateTimeLiteral())
  DateTimeLiteral()
| 
  DateLiteral()
| 
  TimeLiteral()
| 
  NullLiteral()
}

void DateLiteral() :
{}
{
  < DATE_FORMAT_LITERAL_4_2_2 >
  {
    literal("literal.date", pos(token), token.image);
  }
}

void TimeLiteral() :
{}
{
  < TIME_FORMAT_LITERAL >
  {
    literal("literal.time", pos(token), token.image);
  }
}

void DateTimeLiteral() :
{
}
{
  DateLiteral() 
  TimeLiteral()
  {
    literal("literal.datetime", null, 2);
  }
}

void BooleanLiteral() :
{}
{
  < TRUE >
  {
    literal("literal.bool", pos(token), token.image);
  }
| 
  < FALSE >
  {
    literal("literal.bool", pos(token), token.image);
  }
}

void NullLiteral() :
{}
{
  < NULL >
  {
    literal("literal.null", pos(token), token.image);
  }
}

void Block() :
{
  Token x1, x2;
}
{
  x1 = < LBRACE > 
  BlockStatementList() 
  x2 = < RBRACE >
}

void BlockStatementList() :
{
  int args = 0;
}
{
  (
    BlockStatement()
    {
      args++;
    }
  )*
  {
    nop("block.statement", null, args);
  }
}

void OptionalSemiColon() :
{}
{
  (
    < SEMICOLON >
  | < EOF >
  )
}

void SemiColon() :
{}
{
  < SEMICOLON >
}

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
| 
  Block()
| 
  EmptyStatement()
| 
  StatementExpression() OptionalSemiColon()
| 
  IfStatement()
| 
  WhileStatement()
| 
  DoStatement()
| 
  ForStatement()
| 
  BreakStatement()
| 
  ContinueStatement()
| 
  ReturnStatement()
| 
  ThrowStatement()
}

void ExtendedWhereStatement() :
{
  int args = 1;	
}
{
  < COMMA > < WHERE > WhereVarExpalnation()
  (
    LOOKAHEAD(2)
    < COMMA > WhereVarExpalnation()
    {
      ++args;
    }
  )*
  {
    nop("where.explanation", null, args);
  }
}

void WhereVarExpalnation() :
{}
{
  Word("identifier.var.explanation") "-" Expression()
  {
    bop("where.var.expalnation", null);
  }
}

void LabeledStatement() :
{
  String label;
}
{
  < IDENTIFIER >
  {
    label = token.image;
  }
  < COLON >
  {
    notImplemented("startLabel(label)");
  }
  Statement()
  {
    notImplemented("endLabel()");
  }
}

void BlockStatement() :
{}
{
  LOOKAHEAD(Type() < IDENTIFIER > < ASSIGN >)
  LocalVariableDeclaration() SemiColon()
| 
  LOOKAHEAD(Type() < IDENTIFIER > < SEMICOLON >)
  LocalVariableDeclaration() SemiColon()
| 
  LOOKAHEAD(Type() < IDENTIFIER > < COMMA >)
  LocalVariableDeclaration() SemiColon()
| 
  Statement()
}

void StatementExpression() :
{}
{
  Expression()
  [
    LOOKAHEAD(2)
    ExtendedWhereStatement()
    {
      bop("where.expression", null);
    }
  ]
}

void EmptyStatement() :
{}
{
  < SEMICOLON >
  {
    emptyStatement(token.image, pos(token));
  }
}

void IfStatement() :
{
  Token x1;	
  int nodes = 2;
}
{
  x1 = < IF > < LPAREN > Expression() < RPAREN > Statement()
  [
    LOOKAHEAD(1)
    < ELSE > Statement()
    {
      ++nodes;
    }
  ]
  {
    nop("control.if", pos(x1), nodes);
  }
}

void WhileStatement() :
{
  Token x;
}
{
  x = < WHILE > < LPAREN > Expression() < RPAREN > Statement()
  {
    bop("control.while", pos(x));
  }
}

void ReturnStatement() :
{
  int args = 0;
  Token x;
}
{
  x = < RETURN >
  [
    VariableInitializer()
    {
      ++args;
    }
  ]
  < SEMICOLON >
  {
    nop("control.return", pos(x), args);
  }
}

void ThrowStatement() :
{}
{
  < THROW > Expression() < SEMICOLON >
}

void DoStatement() :
{}
{
  {
    notImplemented("startLabel(null)");
  } // anonymous label for cycles
  < DO > Statement() < WHILE > < LPAREN > Expression() < RPAREN > OptionalSemiColon()
  {
    notImplemented("doStatement()");
  }
  {
    notImplemented("endLabel()");
  }
}

void LocalVariableDeclaration() :
{
  int args = 0;
}
{
  Type() VariableDeclarator()
  {
    args++;
  }
  (
    < COMMA > VariableDeclarator()
    {
      args++;
    }
  )*
  {
    nop("local.var.declaration", null, args + 1);
  }
}

void VariableDeclarator() :
{
  boolean withInitializer = false;
}
{
  VariableDeclaratorId()
  [
    < ASSIGN > VariableInitializer()
    {
      withInitializer = true;
    }
  ]
  {
    if (withInitializer)
    {
      bop("local.var.name.init", null);	
    }
  }
}

void VariableDeclaratorId() :
{}
{
  identifier()
  (
    TypeDimension()
  )*
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
| 
  Expression()
}

void ArrayInitializer() :
{
  int args = 0;
  Token x1, x2;
}
{
  x1 = < LBRACE >
  [
    VariableInitializer()
    {
      args++;
    }
    (
      LOOKAHEAD(2)
      < COMMA > VariableInitializer()
      {
        args++;
      }
    )*
  ]
  [ < COMMA > ] 
  x2 = < RBRACE >
  {
    nop("array.init", pos(x1, x2), args);
  }
}

void ForStatement() :
{
  boolean [ ] bParts = new boolean [ 4 ];
  Token x;
}
{
  x = < FOR > < LPAREN >
  [
    ForInit()
    {
      bParts [ 0 ] = true;
    }
  ]
  < SEMICOLON >
  [
    Expression()
    {
      bParts [ 1 ] = true;
    }
  ]
  < SEMICOLON >
  [
    ForUpdate()
    {
      bParts [ 2 ] = true;
    }
  ]
  < RPAREN > Statement()
  {
    bParts [ 3 ] = true;
  }
  {
    nop("control.for", pos(x), bParts);
  }
}

void ForInit() :
{}
{
  LOOKAHEAD(Type() < IDENTIFIER >)
  LocalVariableDeclaration()
| 
  StatementExpressionList()
}

void StatementExpressionList() :
{
  int args = 0;
}
{
  StatementExpression()
  {
    args++;
  }
  (
    < COMMA > StatementExpression()
    {
      args++;
    }
  )*
  {
    if (args > 1) 
    nop("statement_list", null, args);
  }
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{
  String label = null;
}
{
  < BREAK >
  [
    < IDENTIFIER >
    {
      label = token.image;
    }
  ]
  OptionalSemiColon()
  {
    notImplemented("doBreak(label)");
  }
}

void ContinueStatement() :
{
  String label = null;
}
{
  < CONTINUE >
  [
    < IDENTIFIER >
    {
      label = token.image;
    }
  ]
  OptionalSemiColon()
  {
    notImplemented("doContinue(label)");
  }
}

void MethodHeader() :
{}
{
  ResultType() MethodDeclarator()
  {
    nop("method.header", null, 3);
  }
}

void MethodDeclaration() :
{}
{
  ResultType() MethodDeclarator()
  (
    Block()
    {
      nop("method.declaration", null, 4);
    }
  | < SEMICOLON >
  )
}

void MethodDeclarator() :
{}
{
  MethodName() FormalParameters() //( "[" "]" )*
}

void MethodName() :
{}
{
  identifier()
}

void FormalParameters() :
{
  int args = 0;
  Token x1, x2;
}
{
  x1 = < LPAREN >
  [
    FormalParameter()
    {
      ++args;
    }
    (
      < COMMA > FormalParameter()
      {
        ++args;
      }
    )*
  ]
  x2 = < RPAREN >
  {
    nop("method.parameters", pos(x1, x2), args);
  }
}

void FormalParameter() :
{}
{
  Type() VariableDeclaratorId()
  {
    nop("parameter.declaration", null, 2);
  }
}

void VarDeclaration() :
{}
{
  LocalVariableDeclaration() < SEMICOLON >
  {
    uop("var.declaration", null);
  }
}

void MethodOrVarDeclaration() :
{}
{
  LOOKAHEAD(ResultType() MethodDeclarator())	
  MethodDeclaration()
| 
  VarDeclaration()
}

void parseModuleInternal() :
{
  int nMethods = 1;
}
{
  MethodOrVarDeclaration()
  (
    MethodOrVarDeclaration()
    {
      ++nMethods;
    }
  )*
  {
    if (nMethods > 0) nop("module.top", null, nMethods);
  }
  < EOF >
}

void parseTopNodeInternal() :
{}
{
  BlockStatementList()
  {
    uop("block.top", null);
  }
  < EOF >
}
