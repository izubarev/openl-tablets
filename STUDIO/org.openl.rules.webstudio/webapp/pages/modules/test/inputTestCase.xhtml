<ui:composition
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich">

    <style>
        .dynamicTree a img {
            padding: 0 3px 0 5px;
        }

        .dynamicTree a.date-picker-control:link,
        .dynamicTree a.date-picker-control:visited {
            vertical-align: text-bottom;
        }

        .dynamicTree .rf-trn-ico-lf {
            display: none;
        }
    </style>

    <a4j:jsFunction name="saveComplexNodeTypes">
        <a4j:param name="nodeValuesString" assignTo="#{inputArgsBean.complexNodeTypes}"/>
    </a4j:jsFunction>

    <table class="table">
        <thead>
        <tr>
            <a4j:repeat var="argument" value="#{inputArgsBean.arguments}">
                <th>
                    <h:outputText value="#{argument.name}" />
                </th>
            </a4j:repeat>
        </tr>
        </thead>

        <tbody>
        <tr style="vertical-align: top; text-align: left">
            <a4j:repeat var="argumentTreeNode" value="#{inputArgsBean.argumentTreeNodes}">
                <td width="100 px"><rich:panel id="dynamicTreePanel">
                        <rich:tree toggleType="client" selectionType="client"
                            value="#{helper.getRoot(argumentTreeNode)}" var="item"
                            rowKeyVar="rowKeyVar"
                            nodeType="#{item.nodeType}" binding="#{inputArgsBean.currentTreeNode}"
                            styleClass="dynamicTree param-tree" rowKeyConverter="org.richfaces.IntegerSequenceRowKeyConverter">
                            <!-- rowKeyConverter is a temporary solution.
                             After migrating to the newer version of RichFaces it can be removed.
                             See: https://issues.jboss.org/browse/RF-11102 for details -->
                            <rich:treeNode type="collection">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.treeText}" />
                                <a4j:commandLink action="#{inputArgsBean.initCollection}" rendered="#{item.valueNull}"
                                    onclick="saveAllComplexNodeTypes()"
                                    render="dynamicTreePanel" title="Create">
                                    <h:graphicImage value="/images/newtable.gif" />
                                </a4j:commandLink>
                                <a4j:commandLink action="#{inputArgsBean.disposeObject}"
                                    onclick="saveAllComplexNodeTypes()"
                                    rendered="#{not item.valueNull}" render="dynamicTreePanel" title="Dispose">
                                    <h:graphicImage value="/images/close.gif" />
                                </a4j:commandLink>
                                <a4j:commandLink action="#{inputArgsBean.addToCollection}"
                                    rendered="#{not item.valueNull}" render="dynamicTreePanel" styleClass="addButton"
                                    onclick="saveAllComplexNodeTypes()"
                                    oncomplete="createDatePickers()"
                                    title="Add new element to collection">
                                    <h:graphicImage value="/images/add_obj.gif" />
                                </a4j:commandLink>
                            </rich:treeNode>
                            <rich:treeNode type="complex">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.treeText}" />

                                <ui:param name="row" value="#{inputArgsBean.getRow(item, rowKeyVar)}"/>

                                <h:panelGroup rendered="#{item.valueNull and item.baseType}">
                                    <!--If we try to use h:selectOneMenu, 'Create' button stops working -->
                                    <select id="#{row}" class="object-type">
                                        <a4j:repeat value="#{inputArgsBean.getPossibleTypes(item)}" var="option">
                                            <option value="#{option.value}" selected="#{option.value == item.typeToCreate ? 'selected' : ''}">#{option.label}</option>
                                        </a4j:repeat>
                                    </select>
                                </h:panelGroup>

                                <a4j:commandLink action="#{inputArgsBean.initObject}" rendered="#{item.valueNull}"
                                    onclick="saveAllComplexNodeTypes()"
                                    oncomplete="createDatePickers()"
                                    render="dynamicTreePanel" title="Create">
                                    <h:graphicImage value="/images/newtable.gif" />
                                </a4j:commandLink>
                                <a4j:commandLink action="#{inputArgsBean.disposeObject}"
                                    onclick="saveAllComplexNodeTypes()"
                                    rendered="#{not item.valueNull and not item.disposeRestricted}" render="dynamicTreePanel" title="Dispose">
                                    <h:graphicImage value="/images/close.gif" />
                                </a4j:commandLink>
                            </rich:treeNode>
                            <!-- Simple nodes-->
                            <rich:treeNode type="string">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.name} = " rendered="#{not empty item.name}" />
                                <h:inputText id="nodeValue" value="#{item.valueForEdit}" />
                                <h:message for="nodeValue" />
                            </rich:treeNode>
                            <rich:treeNode type="number">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.name} = " rendered="#{not empty item.name}" />
                                <h:inputText id="numberNodeValue" value="#{item.valueForEdit}" onkeypress="checkIsNumber(event, this)" />
                                <h:message for="numberNodeValue" />
                            </rich:treeNode>
                            <rich:treeNode type="boolean">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.name} = " rendered="#{not empty item.name}" />
                                <h:selectBooleanCheckbox value="#{item.valueForEdit}" />
                            </rich:treeNode>
                            <rich:treeNode type="selection">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.name} = " rendered="#{not empty item.name}" />
                                <h:selectOneMenu value="#{item.valueForEdit}">
                                    <f:selectItems value="#{item.valuesForSelect}"/>
                                </h:selectOneMenu>
                            </rich:treeNode>
                            <rich:treeNode type="date">
                                <a4j:commandLink action="#{inputArgsBean.deleteFromCollection}"
                                    rendered="#{item.elementOfCollection}" render="dynamicTreePanel"
                                    onclick="saveAllComplexNodeTypes()"
                                    title="Delete from collection" styleClass="delete-icon"/>
                                <h:outputText value="#{item.name} = " rendered="#{not empty item.name}" />
                                <h:inputText id="dateNodeValue" value="#{item.valueForEdit}" styleClass="dateNodeValue" />
                            </rich:treeNode>
                            <rich:treeNode type="unmodifiable">
                                <h:outputText value="#{item.treeText}" />
                                <h:graphicImage value="/images/warning16.png" title="#{item.warnMessage}" rendered="#{not empty item.warnMessage}"/>
                            </rich:treeNode>
                        </rich:tree>
                    </rich:panel>
                </td>
            </a4j:repeat>
        </tr>
        </tbody>
    </table>

    <script>
        //<![CDATA[
        function createDatePickers() {
            var datePickerGlobalOpts = {
                noDrag: true
            };

            datePickerController.setGlobalVars(datePickerGlobalOpts);

            $j('.dynamicTree .dateNodeValue').each(function () {
                var inputId = $j(this).attr('id');

                var datePickerOpts = {
                    formElements: {},
                    finalOpacity: 100
                };
                datePickerOpts.formElements[inputId] = "m-sl-d-sl-Y";

                datePickerController.destroyDatePicker(inputId); // Destroy old one if exist
                datePickerController.createDatePicker(datePickerOpts);
            });

            $j('.dynamicTree a.date-picker-control').each(function () {
                $j(this).attr('href', 'javascript:void(0)');
            });
        }
        
        function checkIsNumber(event, input) {
            if (event.key && event.key.length > 1 || event.ctrlKey || event.altKey) {
                // Not a character but some control key such as Enter or ctrl + v
                return;
            }
            var char = event.key ? event.key : String.fromCharCode(event.which);
            if (!char.match(/[-+.0-9]/)) {
                event.preventDefault();
            }
        }

        function saveAllComplexNodeTypes() {
            var result = '';
            $j('.object-type').each(function () {
                if (result.length > 0) {
                    result += ','
                }
                var $element = $j(this);
                result += $element.attr('id') + '=' + $element.find('option:selected').val();
            });
            saveComplexNodeTypes(result);
        }

        $j(function () {
            createDatePickers();
        });
        //]]>
    </script>

</ui:composition>
