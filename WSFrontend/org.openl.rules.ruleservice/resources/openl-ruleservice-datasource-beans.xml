<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-lazy-init="true">

    <bean name="repository" class="org.openl.rules.repository.RepositoryInstatiator" factory-method="newRepository">
        <constructor-arg name="factory" value="${production-repository.factory}"/>
        <constructor-arg name="params">
            <map>
                <entry key="id" value="production-repository"/>
                <entry key="uri" value="${production-repository.uri}"/>
                <entry key="login" value="${production-repository.login}"/>
                <entry key="password" value="${production-repository.password}"/>
                <!-- AWS S3 specific -->
                <entry key="bucketName" value="${production-repository.bucket-name}"/>
                <entry key="regionName" value="${production-repository.region-name}"/>
                <entry key="accessKey" value="${production-repository.access-key}"/>
                <entry key="secretKey" value="${production-repository.secret-key}"/>
                <!-- Git specific -->
                <entry key="localRepositoryPath" value="${production-repository.local-repository-path}"/>
                <entry key="branch" value="${production-repository.branch}"/>
                <entry key="tagPrefix" value="${production-repository.tag-prefix}"/>
                <entry key="commentTemplate" value="${production-repository.comment-template}"/>
                <entry key="userDisplayName" value="${production-repository.user-display-name}"/>
                <entry key="userEmail" value="${production-repository.user-email}"/>
                <entry key="connectionTimeout" value="${production-repository.connection-timeout}"/>
                <!-- AWS S3 and Git specific -->
                <entry key="listenerTimerPeriod" value="${production-repository.listener-timer-period}"/>
                <!-- Local File System specific -->
                <entry key="supportDeployments" value="${ruleservice.datasource.filesystem.supportDeployments}"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="rulesDeployerService" class="org.openl.rules.ruleservice.deployer.RulesDeployerService">
        <constructor-arg name="repository" ref="repository"/>
        <constructor-arg name="deployPath" value="${production-repository.base.path}"/>
        <property name="supportDeployments" value="${ruleservice.datasource.filesystem.supportDeployments}"/>
    </bean>

    <bean id="deployClasspathJarsBean" class="org.openl.rules.ruleservice.loader.DeployClasspathJarsBean">
        <property name="rulesDeployerService" ref="rulesDeployerService"/>
        <property name="supportDeployments" value="${ruleservice.datasource.filesystem.supportDeployments}"/>
        <property name="enabled" value="${ruleservice.datasource.deploy.classpath.jars}"/>
        <!-- Workaround to allow projects overrides in LocalRepository after application startup -->
        <property name="overrideable" value="#{'${production-repository.factory}' eq 'org.openl.rules.repository.LocalRepositoryFactory'}"/>
    </bean>

    <!-- Data source storage that provides information about deployments, projects
        and their properties and version -->
    <!-- Wrapper on data source that gives access to data source and resolves the OpenL projects/modules inside the projects.
    Contains own storage for all projects that is used in services. -->
    <bean id="ruleServiceLoader" class="org.openl.rules.ruleservice.loader.RuleServiceLoaderImpl" depends-on="deployClasspathJarsBean">
        <constructor-arg name="repository" ref="repository"/>
        <property name="deployPath" value="${production-repository.base.path}"/>
    </bean>
</beans>
